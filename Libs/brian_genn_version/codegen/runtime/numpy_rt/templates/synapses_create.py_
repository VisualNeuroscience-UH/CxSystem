{#
USES_VARIABLES { _synaptic_pre, _synaptic_post, _all_pre, _all_post,
                 N_incoming, N_outgoing, N,
                 N_pre, N_post, _source_offset, _target_offset }
#}
{# WRITES_TO_READ_ONLY_VARIABLES { _synaptic_pre, _synaptic_post,
                                   N_incoming, N_outgoing, N}
#}
{# ITERATE_ALL { _idx } #}
import numpy as _numpy

numpy_False = _numpy.bool_(False)
numpy_True = _numpy.bool_(True)

# number of synapses in the beginning
_old_num_synapses = {{N}}
# number of synapses during the creation process
_cur_num_synapses = _old_num_synapses

# Resize N_incoming and N_outgoing according to the size of the
# source/target groups
_var_N_incoming.resize(N_post + _target_offset)
_var_N_outgoing.resize(N_pre + _source_offset)

# scalar code
_vectorisation_idx = 1
{{scalar_code|autoindent}}

for _i in range(len({{_all_pre}})):
    _j = _numpy.arange(len({{_all_post}}))
    _vectorisation_idx = _j
    {# The abstract code consists of the following lines (the first two lines
    are there to properly support subgroups as sources/targets):
     _pre_idx = _all_pre
     _post_idx = _all_post
     _cond = {user-specified condition}
    _n = {user-specified number of synapses}
    _p = {user-specified probability}
    #}
    {{vector_code|autoindent}}

    if _cond is False or _cond is numpy_False:
        continue

    if not _numpy.isscalar(_p) or _p != 1:
        _cond_nonzero, = _numpy.logical_and(_cond,
                                       _numpy.random.rand(len(_vectorisation_idx)) < _p).nonzero()
    elif _cond is True or _cond is numpy_True:
        _cond_nonzero = _j
    else:
        _cond_nonzero, = _cond.nonzero()

    if not _numpy.isscalar(_n):
        # The "n" expression involved j
        _cond_nonzero = _cond_nonzero.repeat(_n[_cond_nonzero])
    elif _n != 1:
        # We have a j-independent number
        _cond_nonzero = _cond_nonzero.repeat(_n)

    _numnew = len(_cond_nonzero)
    _new_num_synapses = _cur_num_synapses + _numnew
    {{_dynamic__synaptic_pre}}.resize(_new_num_synapses)
    {{_dynamic__synaptic_post}}.resize(_new_num_synapses)
    {{_dynamic__synaptic_pre}}[_cur_num_synapses:] = _pre_idx
    {{_dynamic__synaptic_post}}[_cur_num_synapses:] = _post_idx[_cond_nonzero]
    _cur_num_synapses += _numnew

# Update the number of total outgoing/incoming synapses per source/target neuron
{{_dynamic_N_outgoing}}[:] += _numpy.bincount({{_dynamic__synaptic_pre}}[_old_num_synapses:], minlength=len({{_dynamic_N_outgoing}}))
{{_dynamic_N_incoming}}[:] += _numpy.bincount({{_dynamic__synaptic_post}}[_old_num_synapses:], minlength=len({{_dynamic_N_incoming}}))

# Resize all dependent dynamic arrays (synaptic weights, delays, etc.) and set
# the total number of synapses
_owner._resize(_cur_num_synapses)
