//----------------------------------------------------------------------------
/*! \page Examples Examples

GeNN comes with a number of complete examples. At the moment, there are seven such example projects provided with GeNN.

<br />

\section Ex_OneComp Single compartment Izhikevich neuron(s)

This is a minimal example, with only one neuron population (with more or less neurons depending on the command line, but without any synapses). The neurons are Izhikevich neurons \cite izhikevich2003simple with homogeneous parameters across the neuron population. The model can be used by navigating to the `userproject/OneComp_project` directory and entering a command line 
\code{.cc}
./generate_run <CPU/GPU> <n> <OUTNAME> <MODEL> <DEBUG> <FTYPE> <REUSE>.
\endcode
All parameters are mandatory and signify:
\arg `CPU/GPU`: Choose whether to run the simulation on CPU (`0`) or GPU (`1`).
\arg `n`: Number of neurons
\arg `OUTNAME`: The base name of the output location and output files
\arg `MODEL`: The name of the model to execute, as provided this would be `OneComp`
\arg `DEBUG`: Whether to start in debug mode (1) or normally (0)
\arg `FTYPE`: Floating point type `%FLOAT` or `%DOUBLE`
\arg `REUSE`: whether to re-use input files

This would create `n`  tonically spiking Izhikevich neuron(s) with no connectivity, receiving a constant, identical 4 nA input current. 

For example, navigate to the `userproject/OneComp_project` directory and type
\code
make all
./generate_run 1 1 Outdir OneComp_sim OneComp 0 FLOAT 0
\endcode
to model a single neuron which output will be saved in the `Outdir_output` directory.

<br />

\section ex_poissonizh Izhikevich neurons driven by Poisson input spike trains:

In this example project there is again a pool of non-connected Izhikevich model neurons \cite izhikevich2003simple that are connected to a pool of Poisson input neurons with a fixed probability.

The model can be compiled by navigating to the `userproject\PoissonIzh_project` directory and typing 
\code
make all
\endcode
Subsequently it can be invoked using the following command line
\code{.cc}
./generate_run <CPU/GPU> <nPOISSON> <nIZHIKEVICH> <PCONN> <GSCALE> <OUTNAME> <MODEL> <DEBUG OFF/ON> <FTYPE> <REUSE>
\endcode
All parameters are mandatory and signify:
\arg `CPU/GPU`: Choose whether to run the simulation on CPU (`0`) or GPU (`1`).
\arg `\nPOISSON`: Number of Poisson input neurons
\arg `\nIZHIKEVICH`: Number of Izhikevich neurons
\arg `PCONN`: Probability of connections
\arg `OUTNAME`: The base name of the output location and output files
\arg `MODEL`: The name of the model to execute, as provided this would be `PoissonIzh`
\arg `DEBUG`: Whether to start in debug mode (1) or normally (0)
\arg `FTYPE`: Floating point type `%FLOAT` or `%DOUBLE`
\arg `REUSE`: whether to re-use input files

For example, navigate to the `userproject/PoissonIzh_project` directory and type
\code{.cc}
./generate_run 1 100 10 0.5 2 Outdir PoissonIzh 0 DOUBLE 0
\endcode
This will generate a network of 100 Poisson neurons connected to 10 Izhikevich neurons with a probability of 0.5. The same example network can be used with 
sparse connectivity (i.e. sparse matrix representations for the connectivity within GeNN) by using the keyword `SPARSE` in the addSynapsePopulation instead of `DENSE` in PoissonIzh.cc, 
uncommenting the lines following the comment `//SPARSE CONNECTIVITY` in the file PoissonIzh_sim.cu and commenting the lines following `//DENSE CONNECTIVITY`. In this example the model would be simulated with double precision variables and input files and connectivity would not be reused from earlier runs.

<br />

\section ex_izhnetwork Pulse-coupled Izhikevich network

This example model is inspired by simple thalamo-cortical network of Izhikevich 
\cite izhikevich2003simple with an excitatory and an inhibitory population of spiking neurons that are randomly connected. 

The model can be built by navigating to the `userproject/Izh_Sparse_project` directory and typing 
\code
make all
\endcode
It can then be used as 
\code{.cc}
./generate_run <CPU/GPU> <nN> <nCONN> <GSCALE> <OUTNAME> <MODEL> <DEBUG OFF/ON> 
 <FTYPE> <REUSE>
\endcode
All parameters are mandatory and signify:
\arg `CPU/GPU`: Choose whether to run the simulation on CPU (`0`) or GPU (`1`).
\arg `\nN`: Number of neurons
\arg `\nCONN`: Number of connections per neuron
\arg `GSCALE': General scaling of synaptic conductances
\arg `OUTNAME`: The base name of the output location and output files
\arg `MODEL`: The name of the model to execute, as provided this would be `Izh_sparse`
\arg `DEBUG`: Whether to start in debug mode (1) or normally (0)
\arg `FTYPE`: Floating point type `%FLOAT` or `%DOUBLE`
\arg `REUSE`: whether to re-use input files

The model creates a pulse-coupled network \cite izhikevich2003simple with 80% excitatory 20% inhibitory neurons, each connecting to nCONN neurons using the sparse matrix connectivity methods of GeNN.

For example, typing
\code{.cc}
./generate_run 1 10000 1000 1 Outdir Izh_sparse 0 FLOAT 0 
\endcode
generates a random network of 8000 excitatory and 2000 inhibitory neurons which each have 1000 outgoing synapses to randomly chosen post-synaptic target neurons. The synapses are of a simple pulse-coupling type. The results of the simulation are saved in the directory `Outdir_output`, debugging is switched off, and the connectivity is generated afresh (rather than being read from existing files).
\note
If connectivity were to be read from files, the connectivity files would have to be in the `inputfiles` sub-directory and be named according to the names of the synapse populations involved, e.g., `gIzh_sparse_ee` (\<variable name>=`g` \<model name>=`Izh_sparse` \<synapse population>=`_ee`). These name conventions are not part of the core GeNN definitions and it is the privilege (or burden) of the user to find their own in their own versions of `generate_run`.

<br />

\section ex_izhdelay Izhikevich network with delayed synapses

This example project demonstrates the feature of synaptic delays in
GeNN. It creates a network of three Izhikevich neuron groups,
connected all-to-all with short, medium and long delay synapse
groups. Synaptic weights are chosen such that neurons in the output group only spike if they are
simultaneously excited by the input neurons, via synapses with long
delay, and the interneurons, via synapses with shorter delay.

To run this example project, navigate to `userproject/SynDelay_project` and type, e.g.,
\code{.cc}
buildmodel SynDelay
make clean && make 
./bin/release/syn_delay 1 output
\endcode

<br />

\section ex_mbody Insect olfaction model

This project implements the insect olfaction model by Nowotny et
al. \cite nowotny2005self that demonstrates self-organized clustering of odours in a
simulation of the insect antennal lobe and mushroom body. As provided
the model works with conductance based Hodgkin-Huxley neurons \cite Traub1991 and
several different synapse types, conductance based (but pulse-coupled)
excitatory synapses, graded inhibitory synapses and synapses with a
simplified STDP rule. 

To explore the model navigate to `userproject/MBody1_project/` and type
\code
make all
./generate_run 
\endcode
This will show you the command line parameters that are needed,
\code{.cc}
generate_run <CPU/GPU> <nAL> <nKC> <nLHI> <nDN> <GSCALE> <OUTNAME> <MODEL> <DEBUG> <FTYPE> <REUSE>
\endcode
All parameters are mandatory and signify:
\arg `CPU/GPU`: Choose whether to run the simulation on CPU (`0`) or GPU (`1`).
\arg `nAL`: Number of neurons in the antennal lobe (AL), the input neurons to this model
\arg `nKC`: Number of Kenyon cells (KC) in the "hidden layer"
\arg `nLH`: Number of lateral horn interneurons, implementing gain control
\arg `nDN`: Number of decision neurons (DN) in the output layer
\arg `GSCALE`: A general rescaling factor for snaptic strength
\arg `OUTNAME`: The base name of the output location and output files
\arg `MODEL`: The name of the model to execute, as provided this would be `MBody1`
\arg `DEBUG`: Whether to start in debug mode (1) or normally (0)
\arg `FTYPE`: Floating point type `%FLOAT` or `%DOUBLE`
\arg `REUSE`: whether to re-use input files

The tool generate_run will generate connectivity files for the model
`MBody1`, compile this model for the CPU and GPU and execute it. The command
line parameters are the numbers of neurons in the different neuropils
of the model and an overall synaptic strength scaling factor. A typical call would be, e.g.,
\code{.cc}
./generate_run 1 100 1000 20 100 0.0025 test1 MBody1 0 FLOAT 0
\endcode
which would generate a model, and run it on the GPU (first parameter), with 100 antennal
lobe neurons, 1000 mushroom body Kenyon cells, 20 lateral horn
interneurons and 100 mushroom body output neurons. All output files 
will be prefixed with `test1` and stored in `test1_output`. The model that is run is defined in `model/MBody1.cc`, debugging is switched off, the model would be simulated using float (single precision floating point) variables and parameters and the connectivity and input would be generated afresh for this run.

As provided, the model outputs a file `test1.out.st` that contains the spiking activity observed in the simulation, There are two columns in this ASCII file, the first one containing the time of a spike and the second one the ID of the neuron that spiked. Users of matlab can use the scripts in the `matlab` directory to plot the results of a simulation.
For more about the model itself and the scientific insights gained from it see \cite nowotny2005self.

<br />

\section ex_mbody_userdef Insect olfaction model with user-defined neuron and synapse models

This examples recapitulates the exact same model as \ref ex_mbody above but with user-defined model types for neurons and synapses. 
It is run the same way as \ref ex_mbody, e.g.
\code{.cc}
./generate_run 1 100 1000 20 100 0.0025 test1 MBody_userdef 0 FLOAT 0
\endcode
But the way user-defined types are used should be very instructive to advanced users wishing to do the same with their models.

<br />
\section ex_mbody_indID Insect Olfaction Model using INDIVIDUALID connectivity scheme

This example is very similar to the \ref ex_mbody example. The only difference is that PN to KC connections are defined with the INDIVIDUALID mechanism.

It is run the same way as \ref ex_mbody, e.g.
\code{.cc}
./generate_run 1 100 1000 20 100 0.0025 test1 MBody_individualID 0 FLOAT 0
\endcode

<br />

\section ex_mbody_indID Insect Olfaction Model using delayed synapses
A variation of the \ref ex_mbody example using synaptic delays.
In this example, the Kenyon Cell-Decision Neuron synapses are delayed by (5 * DT) ms, and the Decision Neuron-Decision Neuron synapses are delayed by (3 * DT) ms.
The example is intended to test the operation of synapses which have a combination of delayed spike propagation and STDP (plasticity).

It is run the same way as \ref ex_mbody, e.g.
\code{.cc}
./generate_run 1 100 1000 20 100 0.0025 test1 MBody_delayedSyn 0 FLOAT 0
\endcode

<br />
\section ex_Vclamp Voltage clamp simulation to estimate Hodgkin-Huxley parameters
This example simulates a population of Hodgkin-Huxley neuron models on the GPU and evolves them with a simple 
guided random search (simple GA) to mimic the dynamics of a separate Hodgkin-Huxley
neuron that is simulated on the CPU. The parameters of the CPU simulated "true cell" are drifting 
according to a user-chosen protocol: Either one of the parameters gNa, ENa, gKd, EKd, gleak,
Eleak, Cmem are modified by a sinusoidal addition (voltage parameters) or factor (conductance or capacitance) - 
protocol 0-6. For protocol 7 all 7 parameters undergo a random walk concurrently.

The syntax of the generate_run program is
\code
generate_run <CPU=0, GPU=1> <protocol> <nPop> <totalT> <outdir> <debug mode? (0/1)> <GPU choice>
\endcode
The parameters are 
\arg GPU/CPU: Whether to use the GPU (1) or CPU (0) for the model neuron population
\arg protocol: Which changes to apply during the run to the parameters of the "true cell"
\arg nPop: Number of neurons in the tracking population
\arg totalT: Time in ms how long to run the simulation 
\arg outdir: The directory in which to save results
\arg debug mode: whether to start in debugging mode (1) or not (0)
GPU choice: explicit choice of the GPU to be used.

An example invocation is:
\code{.cc}
 ./generate_run 1 2 5000 1000 test1 0 0
\endcode

This will simulate nPop= 5000 Hodgkin-Huxley neurons on the GPU which will for 1000 ms be matched to a
 Hodgkin-Huxley neuron where the parameter gKd is sinusoidally modulated. 
The output files will be written into a directory of the name test1_output, which will
be created if it does not yet exist.


-----
\link Quickstart Previous\endlink | \link Examples Top\endlink | \link ReleaseNotes Next\endlink

*/
//----------------------------------------------------------------------------
