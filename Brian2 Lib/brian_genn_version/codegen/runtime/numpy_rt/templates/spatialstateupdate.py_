{# USES_VARIABLES { Cm, dt, v, N,
                  ab_star0, ab_star1, ab_star2, b_plus,
                  ab_plus0, ab_plus1, ab_plus2, b_minus,
                  ab_minus0, ab_minus1, ab_minus2, v_star, u_plus, u_minus,
                  _P, _B, _morph_i, _morph_parent_i, _starts, _ends,
                  _invr0, _invrn} #}
{# ITERATE_ALL { _idx } #}

'''
Solves the cable equation (spatial diffusion of currents).
This is where most time-consuming time computations are done.
'''
from numpy import zeros

# scalar code
_vectorisation_idx = 1
{{scalar_code|autoindent}}

# vector code
_vectorisation_idx = N
{{vector_code|autoindent}}

{%if _scipy_available %}
from scipy.linalg import solve_banded

# Particular solution
b=-({{Cm}}/{{dt}}*{{v}})-_I0
ab = zeros((3,N))
ab[0,:]={{ab_star0}}
ab[1,:]={{ab_star1}}
ab[2,:]={{ab_star2}}
ab[1,:]-=_gtot
{{v_star}}[:]=solve_banded((1,1),ab,b,overwrite_ab=True,overwrite_b=True)
# Homogeneous solutions
b[:]={{b_plus}}
ab[0,:]={{ab_plus0}}
ab[1,:]={{ab_plus1}}
ab[2,:]={{ab_plus2}}
ab[1,:]-=_gtot
{{u_plus}}[:]=solve_banded((1,1),ab,b,overwrite_ab=True,overwrite_b=True)
b[:]={{b_minus}}
ab[0,:]={{ab_minus0}}
ab[1,:]={{ab_minus1}}
ab[2,:]={{ab_minus2}}
ab[1,:]-=_gtot
{{u_minus}}[:]=solve_banded((1,1),ab,b,overwrite_ab=True,overwrite_b=True)
{% else %}
# Pure numpy solution, very slow because it needs forward and backward passes
# along the array that can't be vectorized
b = -({{Cm}} / {{dt}}*{{v}}) - _I0

# Tridiagonal solving
forward = range(1, N)
backward = range(N-2, -1, -1)
c = zeros(N)

# Pass 1
bi = {{ab_star1}} - _gtot  # main diagonal

# First compartment
c[0] = {{ab_star0}}[1] / bi[0]
{{v_star}}[0] = b[0] / bi[0]

# Other compartments
c[1:-1] = {{ab_star0}}[2:]
for i in forward:
    ai = {{ab_star2}}[i-1]  # subdiagonal
    _m = 1.0/(bi[i]-ai*c[i-1])
    c[i] *= _m
    {{v_star}}[i] = (b[i] - ai*{{v_star}}[i-1])*_m

for i in backward:
    {{v_star}}[i] -= c[i]*{{v_star}}[i+1]

# Pass 2
bi = {{ab_plus1}} - _gtot  # main diagonal

# First compartment
c[0] = {{ab_plus0}}[1]/bi[0]
{{u_plus}}[0] = {{b_plus}}[0]/bi[0]

# Other compartments
c[1:-1] = {{ab_plus0}}[2:]  # superdiagonal

for i in forward:
    ai = {{ab_plus2}}[i-1]  # subdiagonal
    _m = 1.0/(bi[i]-ai*c[i-1])
    c[i] *= _m
    {{u_plus}}[i] = ({{b_plus}}[i] - ai*{{u_plus}}[i-1])*_m

for i in backward:
    {{u_plus}}[i] -= c[i]*{{u_plus}}[i+1]

# Pass 3
bi = {{ab_minus1}} - _gtot  # main diagonal

# First compartment
c[0] = {{ab_minus0}}[1]/bi[0]
{{u_minus}}[0] = {{b_minus}}[0]/bi[0]

# Other compartments
c[1:-1] = {{ab_minus0}}[2:]  # superdiagonal
for i in forward:
    ai = {{ab_minus2}}[i-1]  # subdiagonal
    _m = 1.0/(bi[i]-ai*c[i-1]);
    c[i] *= _m
    {{u_minus}}[i] = ({{b_minus}}[i] - ai*{{u_minus}}[i-1])*_m

for i in backward:
    {{u_minus}}[i] -= c[i]*{{u_minus}}[i+1]
{% endif %}

# Prepare matrix for solving the linear system
_n_segments = len({{_B}})
{{_B}}[:] = 0
{{_P}}[:] = 0
for _i, _i_parent, _first, _last, _invr0, _invrn in zip({{_morph_i}},
                                                         {{_morph_parent_i}},
                                                         {{_starts}},
                                                         {{_ends}},
                                                         {{_invr0}},
                                                         {{_invrn}}):
    # Towards parent
    if _i == 1:  # first branch, sealed end
        {{_P}}[0] = {{u_minus}}[_first] - 1
        {{_P}}[0 + 1] = {{u_plus}}[_first]
        {{_B}}[0] = -{{v_star}}[_first]
    else:
        {{_P}}[_i_parent*_n_segments + _i_parent] += (1 - {{u_minus}}[_first]) * _invr0
        {{_P}}[_i_parent*_n_segments + _i] -= {{u_plus}}[_first] * _invr0
        {{_B}}[_i_parent] += {{v_star}}[_first] * _invr0
    # Towards children
    {{_P}}[_i*_n_segments + _i] = (1 - {{u_plus}}[_last]) * _invrn
    {{_P}}[_i*_n_segments + _i_parent] = -{{u_minus}}[_last] * _invrn
    {{_B}}[_i] = {{v_star}}[_last] * _invrn

# Solve the linear system
{% if _scipy_available %}
from scipy.sparse.linalg import spsolve as solve
from scipy.sparse import csr_matrix
_A = csr_matrix({{_P}}.reshape((_n_segments, _n_segments)))
_V = solve(_A, {{_B}})
{% else %}
from numpy.linalg import solve
_V = solve({{_P}}.reshape((_n_segments, _n_segments)), {{_B}})
{% endif %}


# Final solutions as linear combinations
for _i, _i_parent, _first, _last, in zip({{_morph_i}},
                                          {{_morph_parent_i}},
                                          {{_starts}},
                                          {{_ends}}):
    # _last+1 can go beyond the last element, but in Python slicing syntax, this
    # is ignored.
    {{v}}[_first:_last+1] = ({{v_star}}[_first:_last+1]
                                     + _V[_i_parent] * {{u_minus}}[_first:_last+1]
                                     + _V[_i] * {{u_plus}}[_first:_last+1])
